name: Test

on:
    pull_request:
        branches:
            - dev
            - next
        paths:
            - '**'
            - '!**/*.md'
            - '!vscode/**'
            - '!website/**'

env:
    NODE_BUILD_VERSION: 18

jobs:
    dev-setup:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile --check-files

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              id: cache-save-dev-depends
              uses: actions/cache/save@v3
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

    build:
        needs: dev-setup
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@v3
              with:
                  path: |
                      packages/**/lib
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Build
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              run: yarn build

            - name: Cache Save Production
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              uses: actions/cache/save@v3
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

    lint:
        needs: dev-setup
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Lint
              run: yarn lint:check

    os-setup:
        runs-on: ${{ matrix.os }}

        # For PRs from Renovate, update production dependencies only and then run tests.
        # For PRs not from Renovate, proceed with the usual setup and tests.
        if: |
            !contains(github.event.pull_request.labels.*.name, 'Renovate')
            ||
            contains(github.event.pull_request.labels.*.name, 'Dependencies: Production')

        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                node: [18]
                include:
                    - node: 21
                      os: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache Restore productionDependencies
              id: cache-restore-prod-depends
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

            - name: Create .yarnrc for Windows
              if: runner.os == 'Windows'
              run: echo "network-timeout 600000" > .yarnrc

            - name: Install prodcution dependencies
              if: steps.cache-restore-prod-depends.outputs.cache-hit != 'true'
              run: yarn install --production --frozen-lockfile --check-files --ignore-engines

            - name: Cache Save productionDependencies
              if: steps.cache-restore-prod-depends.outputs.cache-hit != 'true'
              uses: actions/cache/save@v3
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

    test:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                node: [18]
                include:
                    - node: 21
                      os: ubuntu-latest
                shard: [1/4, 2/4, 3/4, 4/4]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache Restore productionDependencies
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@v3
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Show directories
              run: |
                  pwd
                  ls -la
                  ls -la ./packages/markuplint
                  ls -la ./packages/markuplint/lib
                  ls -la ./packages/@markuplint
                  ls -la ./packages/@markuplint/*
                  ls -la ./packages/@markuplint/*/lib
                  ls -la ./packages/@markuplint/config-presets
              shell: bash

            - name: Test
              uses: nick-fields/retry@v2
              with:
                  timeout_minutes: 20
                  max_attempts: 3
                  shell: bash
                  command: yarn jest --useStderr --coverage --shard=${{ matrix.shard }}

    playground:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                node: [18]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Install for build on Node.js v${{ matrix.node }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache devDependencies
              uses: actions/cache@v3
              with:
                  path: '**/node_modules'
                  key: os-ubuntu-latest-node${{ matrix.node }}-dev-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore productionDependencies
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@v3
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Playground Building Test
              run: yarn pg:build

    isolated-env:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                pm: [npm, yarn]
                env: [commonjs, esm, typescript]
        steps:
            - uses: actions/checkout@v3
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore productionDependencies
              uses: actions/cache/restore@v3
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@v3
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Link Packages
              run: |
                  cd ${{ github.workspace }}/packages/markuplint; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/astro-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/config-presets; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/create-rule-helper; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/ejs-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/erb-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/file-resolver; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/html-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/html-spec; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/i18n; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/jsx-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/liquid-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/ml-ast; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/ml-config; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/ml-core; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/ml-spec; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/mustache-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/nunjucks-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/parser-utils; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/php-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/pug-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/react-spec; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/rule-textlint; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/rules; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/selector; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/shared; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/smarty-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/svelte-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/types; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/vue-parser; ${{ matrix.pm }} link;
                  cd ${{ github.workspace }}/packages/@markuplint/vue-spec; ${{ matrix.pm }} link;

            - name: Create sandbox directory
              run: |
                  mkdir -p ${{ github.workspace }}/../sandbox/${{ matrix.pm }}
                  cp -r ${{ github.workspace }}/test ${{ github.workspace }}/../sandbox/${{ matrix.pm }}
                  ls -la ${{ github.workspace }}/../sandbox/${{ matrix.pm }}/test

            - name: Create the lock file
              working-directory: ../sandbox/${{ matrix.pm }}/test/isolated-env/${{ matrix.env }}
              run: |
                  ${{ matrix.pm }} install

            - name: Reference packages
              working-directory: ../sandbox/${{ matrix.pm }}/test/isolated-env/${{ matrix.env }}
              run: >-
                  ${{ matrix.pm }} link
                  markuplint
                  @markuplint/astro-parser
                  @markuplint/config-presets
                  @markuplint/create-rule-helper
                  @markuplint/ejs-parser
                  @markuplint/erb-parser
                  @markuplint/file-resolver
                  @markuplint/html-parser
                  @markuplint/html-spec
                  @markuplint/i18n
                  @markuplint/jsx-parser
                  @markuplint/liquid-parser
                  @markuplint/ml-ast
                  @markuplint/ml-config
                  @markuplint/ml-core
                  @markuplint/ml-spec
                  @markuplint/mustache-parser
                  @markuplint/nunjucks-parser
                  @markuplint/parser-utils
                  @markuplint/php-parser
                  @markuplint/pug-parser
                  @markuplint/react-spec
                  @markuplint/rule-textlint
                  @markuplint/rules
                  @markuplint/selector
                  @markuplint/shared
                  @markuplint/smarty-parser
                  @markuplint/svelte-parser
                  @markuplint/types
                  @markuplint/vue-parser
                  @markuplint/vue-spec

            - name: Echo package list
              working-directory: ../sandbox/${{ matrix.pm }}/test/isolated-env/${{ matrix.env }}
              run: |
                  pwd
                  ls -la
                  ${{ matrix.pm }} list --depth=0
                  ls -la node_modules

            - name: Test
              working-directory: ../sandbox/${{ matrix.pm }}/test/isolated-env/${{ matrix.env }}
              run: |
                  ${{ matrix.pm }} test
